import os
from google.appengine.ext.webapp import template

from google.appengine.api import users
from google.appengine.ext import webapp
from google.appengine.ext.webapp.util import run_wsgi_app
from google.appengine.ext import db
from google.appengine.ext.webapp.util import login_required


import yaml

import urllib2
# Author: Robert Pyke

path = os.path.join(os.path.dirname(__file__), 'templates')


class VimrcFile(webapp.RequestHandler):
    def get(self):
        self.response.headers['Content-Type'] = 'text/plain'
       
        # General
        number = self.request.get('number')
        ruler = self.request.get('ruler')
        highlight_search_results = self.request.get('highlight_search_results')

        # Programming
        autoindent = self.request.get('autoindent')
        smartindent = self.request.get('smartindent')
    
        # Spaces/Tab
        tabwidth = self.request.get('tabwidth')
        expandtab = self.request.get('expandtab') 
    
        # Searching
        ignorecase = self.request.get('ignorecase')
        smartcase = self.request.get('smartcase')
        clear_nohlsearch = self.request.get('clear_nohlsearch')
    
        # Tabbed Editing
        tabnew = self.request.get('tabnew')
        tabfind = self.request.get('tabfind')
        gt = self.request.get('gt')

        # Tweaks
        backspace_support = self.request.get('backspace_support')
           
        self.response.out.write("\".vimrc file - Save this file as .vimrc in your home directory. (e.g. /home/user/.vimrc)\n\n")
        self.response.out.write("\"Generated by vimrcgenerator.appspot.com\n")
        self.response.out.write("\"Author: Robert Pyke\n")
        self.response.out.write("\n\n")

        self.response.out.write("\"-- General --\n")
        if number:
            self.response.out.write("set number\t\t\"Show line numbers\n")
        if ruler:
            self.response.out.write("set ruler\t\t\"Show the line and column number of the cursor position\n")


        self.response.out.write("\n\"-- Programming --\n")
            
        if autoindent:
            self.response.out.write("set autoindent\t\t\"Copy indent from current line when starting a new line\n")
        
        if smartindent:   
            self.response.out.write("set smartindent\t\t\"Do smart indenting when starting a new line. Works with supported c-like languages\n")


        self.response.out.write("\n\"-- Spaces/Tabs --\n")
        if expandtab:
            self.response.out.write("set expandtab\t\t\"Use spaces instead of tabs\n")
            self.response.out.write("set shiftwidth=" + tabwidth + "\n")
            self.response.out.write("set tabstop=" + tabwidth + "\n")
        else:
            self.response.out.write("set noexpandtab\t\t\"Strictly use tabs when tab is pressed (this is the default)\n")
            self.response.out.write("set shiftwidth=" + tabwidth + "\n")
            self.response.out.write("set tabstop=" + tabwidth + "\n")
        

        self.response.out.write("\n\"-- Searching --\n")
        
        if highlight_search_results:
            self.response.out.write("set hlsearch\t\t\"Highlight search results\n")

        if ignorecase:
            self.response.out.write("set ignorecase\t\t\"When doing a search, ignore the case of letters\n")
    
        if smartcase:
            self.response.out.write("set smartcase\t\t\"Override the ignorecase option if the search pattern contains upper case letters\n")

        if clear_nohlsearch:
            self.response.out.write("\"Clear the search highlight by pressing ENTER when in Normal mode (Typing commands)\n")
            self.response.out.write(":nnoremap <CR> :nohlsearch<CR>/<BS><CR>\n")


        self.response.out.write("\n\"-- Tabbed Editing --\n")
        if tabnew:
            self.response.out.write("\"Open a new (empty) tab by pressing CTRL-T. Prompts for name of file to edit\n")
            self.response.out.write("map <C-T> :tabnew<CR>:edit \n")
        if tabfind:
            self.response.out.write("\"Open a file in a new tab by pressing CTRL-O. Prompts for name of file to edit\n")
            self.response.out.write("map <C-O> :tabfind \n")
        if gt:
            self.response.out.write("\"Switch between tabs by pressing Shift-Tab\n")
            self.response.out.write("map <S-Tab> gt\n")


        self.response.out.write("\n\"-- Tweaks --\n")
        if backspace_support:
            
            print_string = "\"Add tweak for better backspace support\nset backspace=indent,eol,start\n"
            self.response.out.write(print_string)

    


application = webapp.WSGIApplication(
                                    [
                                        ('/.vimrc', VimrcFile)
                                    ],
                                    debug=True
                                )

def main():
    run_wsgi_app(application)

if __name__ == "__main__":
    main()


